
1)koyun-keçi mtdna referanslarını birbirlerine hizala, uyumsuzluk gösteren pozisyonları bul

*sequence1.fasta : koyun referans mtdna
*sequence2.fasta : keçi referans mtdna


if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("Biostrings")

library("Biostrings")

trovis=readDNAStringSet("sequence1.fasta",format = "fasta")
trcapra=readDNAStringSet("sequence2.fasta",format = "fasta")

tralign=pairwiseAlignment(trovis$`NC_001941.1 Ovis aries mitochondrion, complete genome`,trcapra$`NC_005044.2 Capra hircus mitochondrion, complete genome`,type="global")
trmismatch=mismatchSummary(tralign)
mmeq=trmismatch$subject


tr2align=pairwiseAlignment(trcapra$`NC_005044.2 Capra hircus mitochondrion, complete genome`,trovis$`NC_001941.1 Ovis aries mitochondrion, complete genome`,type="global")
tr2mismatch=mismatchSummary(tr2align)
mm2eq=tr2mismatch$subject

2) transversiyonlarla sınırla

poschi=mmeq[!(mmeq$Subject == "T" & mmeq$Pattern == "C" | mmeq$Subject == "C" & mmeq$Pattern == "T" | mmeq$Subject == "A" & mmeq$Pattern == "G" | mmeq$Subject == "G" & mmeq$Pattern == "A"), c(1,2) ]
write.table(poschi,file ="poschi.bed",sep=\t,col.names=F)

posoar=mm2eq[!(mm2eq$Subject == "T" & mm2eq$Pattern == "C" | mm2eq$Subject == "C" & mm2eq$Pattern == "T" | mm2eq$Subject == "A" & mm2eq$Pattern == "G" | mm2eq$Subject == "G" & mm2eq$Pattern == "A"), c(1,2) ]
write.table(posoar,file ="posoar.bed",sep=\t,col.names=F)

3)transversiyonlarla sınırlanmış uyumsuzluk gösteren pozisyonlara denk gelen keçi ya da koyun içinde polimorfik olan pozisyonları bul

*chi_d_pos.bed : keçi içinde polimorfik olan pozisyonlar

system("awk '{print $2}' poschi.bed > chi_mm_pos.bed")
system("awk '{print $2}' posoar.bed > oar_mm_pos.bed")

a. system("paste oar_mm_pos.bed chi_mm_pos.bed > oc_mmpos.bed")
b. system(" grep -f chi_d_pos.bed chi_mm_pos.bed > chi_pol_mm_int.bed")


4) keçi için bulunan pozisyonların koyunda denk geldiği pozisyonları bul

pol_chi=read.table("chi_pol_mm_int.bed")
oarchi=read.table("oc_mmpos.bed")

polnew_chi=data.frame(V2=c(seq(1,157),pol_chi$V1))

merchi_oc=merge(polnew_chi,oarchi,by="V2")

- 3ab ve 4. adımları koyuna da uygula

5) keçi ve koyunda polimorfik olan pozisyonları birleştir 

polpos_oar=sort(c(meroar_oc$V2,merchi_oc$V1))
polpos_oar=polpos_oar[! duplicated(polpos_oar) ]

polpos_chi=sort(c(meroar_oc$V1,merchi_oc$V2))
polpos_chi=polpos_chi[! duplicated(polpos_chi) ]


6)transversiyonlarla sınırlanmış uyumsuzluk gösteren pozisyonlara denk gelenler polimorfizmleri çıkar, bed dosyası belirteç pozisyonlar olacak

new_trvposoar=sort(c(polpos_oar,posoar$1))
new_trvposchi=sort(c(polpos_chi,poschi$1))

wopol_trvposchi=new_trvposchi[! (duplicated(new_trvposchi) | duplicated(new_trvposchi,fromLast=T)) ]
wopol_trvposoar=new_trvposoar[! (duplicated(new_trvposoar) | duplicated(new_trvposoar,fromLast=T)) ]

b_polpos_oar=data.frame(rep("MT",length(wopol_trvposoar)), wopol_trvposoar-1,wopol_trvposoar)
b_polpos_chi=data.frame(rep("MT",length(wopol_trvposchi)),wopol_trvposchi-1,wopol_trvposchi)


write.table(b_polpos_oar,"trvposoar.bed",col.names = F,row.names = F, sep = "\t", quote = F)
write.table(b_polpos_chi,"trvposchi.bed",col.names = F,row.names = F, sep = "\t",quote = F)


